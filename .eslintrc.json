{
  "root": true,
  "overrides": [
    {
      "files": ["*.ts"],
      "parserOptions": {
        "project": ["tsconfig.json"],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/ng-cli-compat",
        "plugin:@angular-eslint/ng-cli-compat--formatting-add-on",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:prettier/recommended"
      ],
      "plugins": ["simple-import-sort", "prettier"],
      "rules": {
        "prettier/prettier": "warn",
        "@angular-eslint/component-class-suffix": "warn",
        "@angular-eslint/component-selector": [
          "warn",
          {
            "type": "element",
            "prefix": ["pfy", "pfa", ""],
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/contextual-lifecycle": "warn",
        "@angular-eslint/directive-class-suffix": "warn",
        "@angular-eslint/directive-selector": [
          "warn",
          {
            "type": "attribute",
            "prefix": ["pfa", "pfy", "gen"],
            "style": "camelCase"
          }
        ],
        "@angular-eslint/no-conflicting-lifecycle": "warn",
        "@angular-eslint/no-host-metadata-property": "off",
        "@angular-eslint/no-input-rename": "warn",
        "@angular-eslint/no-inputs-metadata-property": "warn",
        "@angular-eslint/no-output-native": "warn",
        "@angular-eslint/no-output-on-prefix": "warn",
        "@angular-eslint/no-output-rename": "warn",
        "@angular-eslint/no-outputs-metadata-property": "warn",
        "@angular-eslint/use-lifecycle-interface": "warn",
        "@angular-eslint/use-pipe-transform-interface": "warn",
        "@typescript-eslint/adjacent-overload-signatures": "warn",
        "@typescript-eslint/ban-types": [
          "warn",
          {
            "types": {
              "Object": {
                "message": "Avoid using the `Object` type. Did you mean `object`?"
              },
              "Function": {
                "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
              },
              "Boolean": {
                "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
              },
              "Number": {
                "message": "Avoid using the `Number` type. Did you mean `number`?"
              },
              "String": {
                "message": "Avoid using the `String` type. Did you mean `string`?"
              },
              "Symbol": {
                "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
              }
            }
          }
        ],
        "@typescript-eslint/consistent-type-assertions": "warn",
        "@typescript-eslint/dot-notation": "warn",
        "@typescript-eslint/explicit-function-return-type": [
          "warn",
          {
            "allowExpressions": false,
            "allowTypedFunctionExpressions": true,
            "allowHigherOrderFunctions": true,
            "allowDirectConstAssertionInArrowFunctions": true,
            "allowConciseArrowFunctionExpressionsStartingWithVoid": false
          }
        ],
        "@typescript-eslint/member-delimiter-style": [
          "off",
          {
            "multiline": {
              "delimiter": "none",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "semi",
              "requireLast": false
            }
          }
        ],
        "@typescript-eslint/member-ordering": "off",
        "@typescript-eslint/naming-convention": [
          "warn",
          {
            "selector": "default",
            "format": ["camelCase"]
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE"]
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          },
          {
            "selector": "enumMember",
            "format": ["PascalCase"]
          },
          {
            "selector": "parameter",
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          }
        ],
        "@typescript-eslint/no-empty-interface": "warn",
        "@typescript-eslint/no-inferrable-types": [
          "warn",
          {
            "ignoreParameters": true
          }
        ],
        "@typescript-eslint/no-misused-new": "warn",
        "@typescript-eslint/no-namespace": "warn",
        "@typescript-eslint/no-non-null-assertion": "warn",
        "@typescript-eslint/no-unused-expressions": "warn",
        "@typescript-eslint/no-var-requires": "warn",
        "@typescript-eslint/prefer-for-of": "warn",
        "@typescript-eslint/prefer-function-type": "warn",
        "@typescript-eslint/prefer-namespace-keyword": "warn",
        "@typescript-eslint/semi": ["off", null],
        "@typescript-eslint/triple-slash-reference": [
          "warn",
          {
            "path": "always",
            "types": "prefer-import",
            "lib": "always"
          }
        ],
        "@typescript-eslint/type-annotation-spacing": "off",
        "@typescript-eslint/unified-signatures": "warn",
        "no-magic-numbers": "off",
        "@typescript-eslint/no-magic-numbers": [
          "warn",
          {
            "ignoreNumericLiteralTypes": true,
            "ignoreEnums": true,
            "ignoreReadonlyClassProperties": true,
            "ignoreDefaultValues": true,
            "ignore": [0, 1, -1, 100]
          }
        ],
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": ["warn"],
        "@typescript-eslint/quotes": "off",
        "arrow-parens": ["off", "always"],
        "brace-style": ["off", "off"],
        "complexity": [
          "warn",
          {
            "max": 8
          }
        ],
        "constructor-super": "warn",
        "eol-last": "off",
        "eqeqeq": ["warn", "smart"],
        "guard-for-in": "warn",
        "id-blacklist": [
          "warn",
          "any",
          "Number",
          "number",
          "String",
          "string",
          "Boolean",
          "boolean",
          "Undefined",
          "undefined"
        ],
        "id-match": "warn",
        "jsdoc/check-alignment": "warn",
        "jsdoc/newline-after-description": "warn",
        "jsdoc/no-types": "warn",
        "linebreak-style": "off",
        "max-len": "off",
        "new-parens": "off",
        "newline-per-chained-call": "off",
        "no-bitwise": "warn",
        "no-caller": "warn",
        "no-cond-assign": "warn",
        "no-debugger": "warn",
        "no-eval": "warn",
        "no-extra-semi": "off",
        "no-fallthrough": "warn",
        "no-irregular-whitespace": "off",
        "no-new-wrappers": "warn",
        "no-throw-literal": "warn",
        "no-trailing-spaces": "off",
        "no-undef-init": "warn",
        "no-underscore-dangle": "warn",
        "comma-dangle": "off",
        "no-unsafe-finally": "warn",
        "no-unused-labels": "warn",
        "no-var": "warn",
        "object-shorthand": "warn",
        "one-var": ["warn", "never"],
        "prefer-const": "warn",
        "quote-props": "off",
        "radix": "warn",
        "simple-import-sort/imports": "error",
        "simple-import-sort/exports": "error",
        "import/first": "error",
        "import/newline-after-import": "error",
        "import/no-duplicates": "error",
        "space-before-function-paren": "off",
        "space-in-parens": ["off", "never"],
        "use-isnan": "warn"
      }
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {
        "@angular-eslint/template/banana-in-box": "warn",
        "@angular-eslint/template/cyclomatic-complexity": [
          "warn",
          {
            "maxComplexity": 8
          }
        ],
        "@angular-eslint/template/no-negated-async": "warn"
      }
    },
    {
      "files": ["**/?(*.)spec.ts"],
      "rules": {
        "@typescript-eslint/no-magic-numbers": "off"
      }
    }
  ]
}
